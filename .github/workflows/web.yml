name: "Web App CI/CD"

on:
  push:
    branches: [app/web]
  pull_request:
    branches: [dev, main]

defaults:
  run:
    working-directory: ./apps/web

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master
      - uses: pnpm/action-setup@v2
        with:
          version: latest
      - uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "pnpm"
          cache-dependency-path: apps/web/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm lint

  format:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master
      - uses: pnpm/action-setup@v2
        with:
          version: latest
      - uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "pnpm"
          cache-dependency-path: apps/web/pnpm-lock.yaml
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Format
        run: pnpm format

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master
      - uses: pnpm/action-setup@v2
        with:
          version: latest
      - uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "pnpm"
          cache-dependency-path: apps/web/pnpm-lock.yaml
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build

  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master
      - uses: pnpm/action-setup@v2
        with:
          version: latest
      - uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "pnpm"
          cache-dependency-path: apps/web/pnpm-lock.yaml
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Test
        run: pnpm test

  deploy-production:
    runs-on: ubuntu-latest

    # only run this job when the branch is main
    # if: github.ref == 'refs/heads/main'

    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - uses: actions/checkout@v2
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  # publish:
  #   runs-on: ubuntu-latest
  #   needs: [build, test]
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@master
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
  #     - name: Build and push
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: ./apps/web/.
  #         file: ./apps/web/Dockerfile
  #         push: true
  #         tags: floriaaan/goodfood-web:latest
