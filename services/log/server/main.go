package main

import (
	"context"
	"fmt"
	"log"
	"net"
	"os"

	pb "goodfood-log/proto"

	"github.com/joho/godotenv"

	"github.com/golang/protobuf/ptypes/empty"
	"github.com/golang/protobuf/ptypes/timestamp"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/types/known/structpb"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

type Log struct {
	gorm.Model
	EventMessage string           `json:"event_message"`
	Metainfo     *structpb.Struct `gorm:"type:jsonb;column:metainfo"`
	Timestamp    *timestamp.Timestamp
}

// *main.LogServiceServer satisfies the interface generated by the protobuf compiler
type LogServiceServer struct {
	pb.UnimplementedLogServiceServer
	DB *gorm.DB
}

func (l *Log) ToProto() *pb.Log {
	return &pb.Log{
		Id:           int32(l.ID),
		EventMessage: l.EventMessage,
		Metainfo:     l.Metainfo,
		Timestamp:    l.Timestamp,
	}
}

func (s *LogServiceServer) CreateLog(ctx context.Context, req *Log) (*pb.CreateLogResponse, error) {
	log := &Log{
		EventMessage: req.EventMessage,
		Metainfo:     req.Metainfo,
		Timestamp:    req.Timestamp,
	}
	result := s.DB.Create(log)
	if result.Error != nil {
		return nil, result.Error
	}
	return &pb.CreateLogResponse{
		Id: int32(log.ID),
	}, nil
}

func (s *LogServiceServer) GetLog(ctx context.Context, req *pb.GetLogRequest) (*Log, error) {
	var log Log
	result := s.DB.First(&log, req.Id)
	if result.Error != nil {
		return nil, result.Error
	}
	return &log, nil
}

func (s *LogServiceServer) ListLog(ctx context.Context, _ *empty.Empty) (*pb.ListLogResponse, error) {
	var logs []Log
	result := s.DB.Find(&logs)
	if result.Error != nil {
		return nil, result.Error
	}
	var logMessages []*pb.Log
	for _, log := range logs {
		logMessages = append(logMessages, log.ToProto())
	}
	return &pb.ListLogResponse{
		Logs: logMessages,
	}, nil
}

func ConnectToDB(connectionString string) (*gorm.DB, error) {
	db, err := gorm.Open(postgres.Open(connectionString), &gorm.Config{})
	if err != nil {
		return nil, err
	}
	return db, nil
}

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Fatalf("failed to load env file: %v", err)
	}
	dbURI := os.Getenv("DATABASE_URL")
	port := os.Getenv("PORT")

	db, err := ConnectToDB(dbURI)
	if err != nil {
		log.Fatalf("failed to connect to database: %v", err)
	}

	lis, err := net.Listen("tcp", fmt.Sprintf(":%s", port))
	if err != nil {
		log.Fatalf("failed to listen: %v", err)
	}

	s := grpc.NewServer()
	srv := &LogServiceServer{
		DB: db,
	}

	pb.RegisterLogServiceServer(s, srv.UnimplementedLogServiceServer)

	fmt.Println("Starting gRPC server...")
	if err := s.Serve(lis); err != nil {
		log.Fatalf("failed to serve: %v", err)
	}
}
